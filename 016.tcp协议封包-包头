Source Port & Destination Port (來源埠口 & 目標埠口)
什麼是埠口(port)？我們知道 IP 封包的傳送主要是藉由 IP 位址連接兩端， 但是到底這個連線的通道是連接到哪裡去呢？沒錯！就是連接到 port 上頭啦！ 舉例來說，鳥哥的網站有開放 WWW 伺服器，這表示鳥站的主機必須要啟動一個可以讓 client 端連接的端口，這個端口就是 port (中文翻譯成為埠口)。同樣的，用戶端想要連接到鳥哥的鳥站時，就必須要在 client 主機上面啟動一個 port ，這樣這兩個主機才能夠利用這條『通道』來傳遞封包資料喔！這個目標與來源 port 的紀錄，可以說是 TCP 封包上最重要的參數了！

Sequence Number (封包序號)
由於 TCP 封包必須要帶入 IP 封包當中，所以如果 TCP 資料太大時(大於 IP 封包的容許程度)， 就得要進行分段。這個 Sequence Number 就是記錄每個封包的序號，可以讓收受端重新將 TCP 的資料組合起來。

Acknowledge Number (回應序號)
為了確認主機端確實有收到我們 client 端所送出的封包資料，我們 client 端當然希望能夠收到主機方面的回應，那就是這個 Acknowledge Number 的用途了。 當 client 端收到這個確認碼時，就能夠確定之前傳遞的封包已經被正確的收下了。

Data Offset (資料補償)
在圖 2.4-2 倒數第二行有個 Options 欄位對吧！那個 Options 的欄位長度是非固定的，而為了要確認整個 TCP 封包的大小，就需要這個標誌來說明整個封包區段的起始位置。

Reserved (保留)
未使用的保留欄位。

Code (Control Flag, 控制標誌碼)
當我們在進行網路連線的時候，必須要說明這個連線的狀態，好讓接收端瞭解這個封包的主要動作。 這可是一個非常重要的控制碼喔！這個欄位共有 6 個 bits ，分別代表 6 個控制碼，若為 1 則為啟動。分別說明如下：

URG(Urgent)：若為 1 則代表該封包為緊急封包， 接收端應該要緊急處理，且圖 2.4-1 當中的 Urgent Pointer 欄位也會被啟用。

ACK(Acknowledge)：若為 1 代表這個封包為回應封包， 則與上面提到的 Acknowledge Number 有關。

PSH(Push function)：若為 1 時，代表要求對方立即傳送緩衝區內的其他對應封包，而無須等待緩衝區滿了才送。 

RST(Reset)：如果 RST 為 1 的時候，表示連線會被馬上結束，而無需等待終止確認手續。這也就是說， 這是個強制結束的連線，且發送端已斷線。

SYN(Synchronous)：若為 1，表示發送端希望雙方建立同步處理， 也就是要求建立連線。通常帶有 SYN 標誌的封包表示『主動』要連接到對方的意思。

FIN(Finish)：若為 1 ，表示傳送結束，所以通知對方資料傳畢， 是否同意斷線，只是發送者還在等待對方的回應而已。

其實每個項目都很重要，不過我們這裡僅對 ACK/SYN 有興趣而已，這樣未來在談到防火牆的時候，你才會比較清楚為啥每個 TCP 封包都有所謂的『狀態』條件！那就是因為連線方向的不同所致啊！底下我們會進一步討論喔！ 至於其他的資料，就得請您自行查詢網路相關書籍了！

Window (滑動視窗)
主要是用來控制封包的流量的，可以告知對方目前本身有的緩衝器容量(Receive Buffer) 還可以接收封包。當 Window=0 時，代表緩衝器已經額滿，所以應該要暫停傳輸資料。 Window 的單位是 byte。

Checksum(確認檢查碼)
當資料要由發送端送出前，會進行一個檢驗的動作，並將該動作的檢驗值標注在這個欄位上； 而接收者收到這個封包之後，會再次的對封包進行驗證，並且比對原發送的 Checksum 值是否相符，如果相符就接受，若不符就會假設該封包已經損毀，進而要求對方重新發送此封包！

Urgent Pointer(緊急資料)
這個欄位是在 Code 欄位內的 URG = 1 時才會產生作用。可以告知緊急資料所在的位置。

Options(任意資料)
目前此欄位僅應用於表示接收端可以接收的最大資料區段容量，若此欄位不使用， 表示可以使用任意資料區段的大小。這個欄位較少使用。

Padding(補足欄位)
如同 IP 封包需要有固定的 32bits 表頭一樣， Options 由於欄位為非固定， 所以也需要 Padding 欄位來加以補齊才行。同樣也是 32 bits 的整數。
談完了 TCP 表頭資料後，再來讓我們瞭解一下這個表頭裡面最重要的埠口資訊吧！


通訊埠口
在上圖的 TCP 表頭資料中，最重要的就屬那 16 位元的兩個咚咚，亦即來源與目標的埠口。由於是 16 位元，因此目標與來源埠口最大可達 65535 號 (2 的 16 次方)！ 那這個埠口有什麼用途呢？上面稍微提到過，網路是雙向的，伺服器與用戶端要達成連線的話， 兩邊應該要有一個對應的埠口來達成連線通道，好讓資料可以透過這個通道來進行溝通。

那麼這個埠口怎麼打開呢？就是透過程式的執行！舉例來說，鳥哥的網站上，必須要啟動一個 WWW 伺服器軟體， 這個伺服器軟體會主動的喚起 port 80 來等待用戶端的連線。你想要看我網站上的資料，就得要利用瀏覽器， 填入網址，然後瀏覽器也會啟動一個埠口，並將 TCP 的表頭填寫目標埠口為 80 ，而來源埠口是你主機隨機啟動的一個埠口， 然後將 TCP 封包封裝到 IP 後，送出到網路上。等鳥站主機接收到你這個封包後，再依據你的埠口給予回應。

這麼說你或許不好理解，我們換個說法好了。假如 IP 是網路世界的門牌，那麼這個埠口就是那個門牌號碼上建築物的樓層！ 每個建築物都有 1~65535 層樓，你需要什麼網路服務，就得要去該對應的樓層取得正確的資料。但那個樓層裡面有沒有人在服務你呢？ 這就得要看有沒有程式真的在執行啦。所以，IP 是門牌，TCP 是樓層，真正提供服務的， 是在該樓層的那個人 (程式)！
